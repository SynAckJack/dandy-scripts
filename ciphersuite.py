#!/usr/bin/env python3
# ciphersuite.py - Check ciphers from testssl.sh against ciphersuite.info

import sys
import argparse
import json
import requests
import webbrowser
from datetime import datetime


class colours:
    HEADER = '\033[95m[*] '
    OKAY = '\033[92m[+] '
    WARN = '\033[93m[!] '
    FAIL = '\033[91m[x] '
    ENDC = '\033[0m'


recommended = []
secure = []
weak = []
insecure = []


def write_file(args, default_filename):
    if args.v:
        print(colours.HEADER + "INFO: Writing results to file " +
              args.output + colours.ENDC)
    if args.output == ' ':
        try:
            output_file = open(default_filename, "w")
        except:
            print(
                colours.FAIL + "ERROR: Failed to open default file for writing. What happened to it?" + colours.ENDC)
            exit(1)
    else:
        try:
            output_file = open(args.output, "w")
        except:
            print(
                colours.FAIL + "ERROR: Failed to open file for writing. What happened to it?" + colours.ENDC)
            exit(1)

    if recommended:
        output_file.write("The following ciphers have a recommended rating:\n")
        for i in recommended:
            output_file.write(i + "\n")
        output_file.write("\n")

    if secure:
        output_file.write("The following ciphers have a secure rating:\n")
        for i in secure:
            output_file.write(i + "\n")
        output_file.write("\n")

    if weak:
        output_file.write("The following ciphers have a weak rating:\n")
        for i in weak:
            output_file.write(i + "\n")
        output_file.write("\n")

    if insecure:
        output_file.write("The following ciphers have an insecure rating:\n")
        for i in insecure:
            output_file.write(i + "\n")
        output_file.write("\n")


def print_strengths():
    if recommended:
        print("\nThe following ciphers have a recommended rating:")
        for i in recommended:
            print(colours.OKAY + i + colours.ENDC)

    if secure:
        print("\nThe following ciphers have a secure rating:")
        for i in secure:
            print(colours.OKAY + i + colours.ENDC)

    if weak:
        print("\nThe following ciphers have a weak rating:")
        for i in weak:
            print(colours.WARN + i + colours.ENDC)

    if insecure:
        print("\nThe following ciphers have an insecure rating:")
        for i in insecure:
            print(colours.FAIL + i + colours.ENDC)


def query_api(args, ciphers):
    print(colours.OKAY + "Querying API..." + colours.ENDC)

    for i in ciphers:
        if args.v:
            print(colours.HEADER +
                  "INFO: Querying https://ciphersuite.info/api/cs/" + i)
        response = requests.get("https://ciphersuite.info/api/cs/" + i)
        # print(response.json()[i]['security'])
        if response.json()[i]['security'] == "recommended":
            recommended.append(i)
        elif response.json()[i]['security'] == "secure":
            secure.append(i)
        elif response.json()[i]['security'] == "weak":
            weak.append(i)
        else:
            insecure.append(i)
    print_strengths()


def read_file(args, ciphers):

    try:
        if args.v:
            print(colours.HEADER + "INFO: Opening file..." + colours.ENDC)
        else:
            print(colours.OKAY + "Opening file..." + colours.ENDC)
        input_file = open(args.file, "r")
        data = json.load(input_file)
    except:
        print(
            colours.FAIL + "ERROR: Failed to read input file. Does it exist?" + colours.ENDC)
        exit(1)
    if args.v:
        print(colours.HEADER + "INFO: Verifying correct format..." + colours.ENDC)
    if not 'scanResult' in data:
        print(
            colours.FAIL + "ERROR: Input file doesn't seem to be from testssl. Is it the correct format?" + colours.ENDC)
        exit(1)

    if args.v:
        print(colours.HEADER + "INFO: Loading ciphers" + colours.ENDC)
    try:
        for i in data['scanResult'][0]['cipherTests']:
            ciphers.append(i['finding'].split()[-1])
            if args.v:
                print(colours.HEADER + "INFO: Got cipher: " +
                      i['finding'].split()[-1] + colours.ENDC)

        print(colours.OKAY + "Extracted ciphers..." + colours.ENDC)
    except:
        print(
            colours.FAIL + "ERROR: Problem reading input file. Is it the correct format?" + colours.ENDC)
        exit(1)

    query_api(args, ciphers)


def main():

    error = False
    ciphers = []
    default_filename = ''

    parser = argparse.ArgumentParser(
        description="Check strength of ciphers against https://ciphersuite.info.\nTakes a JSON file generated by testssl.sh.\n\nTo generate the needed file, use the -oA switch when \nrunning testssl.sh", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-v", help="Verbose output.", action="store_true")
    parser.add_argument("-o", help="Write to file. If no filename given, output \nwill be written to 'DD_MM_YYYY-HH:MM:SS_ciphersuite.txt'",
                        dest="output", nargs='?', action='store', const=' ')
    parser.add_argument(
        "-b", help="Open weak/insecure ciphers at \nhttps://ciphersuite.info using default browser.", action="store_true")
    parser.add_argument("-f", help=("\033[92mRequired. " +
                        colours.ENDC + "Read from file."), dest="file")

    args = parser.parse_args()

    if len(sys.argv) == 1 or not args.file:
        parser.print_help()
        print(colours.FAIL +
              "\nERROR: -f must be specified so ciphers can be read..." + colours.ENDC)
        exit(1)

    if args.v:
        print(colours.HEADER + "INFO: Verbose output enabled." + colours.ENDC)
    if args.output:
        if args.v:
            print(colours.HEADER +
                  "INFO: Checking that output file can be created..." + colours.ENDC)
        if args.output == ' ':
            default_filename = (datetime.today().strftime(
                "%d-%m-%Y-%H:%M:%S") + "_ciphersuite.txt")
            try:
                print(colours.HEADER +
                      "INFO: Creating default file..." + colours.ENDC)
                output_file = open(default_filename, "x")
                output_file.close()
            except:
                print(
                    colours.FAIL + "ERROR: Failed to create file for writing. Does it already exist?" + colours.ENDC)
                exit(1)
        else:
            try:
                output_file = open(args.output, "x")
                output_file.close()
            except:
                print(
                    colours.FAIL + "ERROR: Failed to create file for writing. Does it already exist?" + colours.ENDC)
                exit(1)
    read_file(args, ciphers)

    if args.output:
        write_file(args, default_filename)

    if args.b:
        webbrowser.open_new(
            "https://ciphersuite.info/")
        if weak:
            for i in weak:
                webbrowser.open(
                    "https://ciphersuite.info/cs/" + i, new=2)
        if insecure:
            for i in insecure:
                webbrowser.open(
                    "https://ciphersuite.info/cs/" + i, new=2)

    print(colours.OKAY + "\nAll done! üëç" + colours.ENDC)


if __name__ == '__main__':
    main()
